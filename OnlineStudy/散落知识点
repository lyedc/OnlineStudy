1 设置环境上下文 这样就可在末班中使用 static_ur' 和 media_url
    'django.core.context_processors.media',
    'django.core.context_processors.static',
    这个还是需要设置上下文的对应关系的
2 自定义表单的错误的验证信息
    from django import forms
    forms.Form
    forms.EmailField

     cd = form.cleaned_data  # 返回的是验证过的数据 错误的数据不会再这里面
            print(cd)
            # 开始发送邮件
            # 构建 在帖子中显示的连接
            post_url = request.build_absolute_uri(post.get_absolute_url())
            # 发送的主题
            subject = '{} ({}) recommends you reading "{}"'.format(
                cd['name'], cd['email'], post.title)
            # 发送的内容
            message = 'read "{}" at {}\n\n{}\'s comments:{}'.format(
                post.title, post_url, cd['name'], cd['comments'])
            # 开始发送邮件

        subject：一个字符串。
        message：一个字符串。
        from_email：一个字符串。
        recipient_list：字符串列表，每个都是一个电子邮件地址。 recipient_list的每个成员将在电子邮件的“To：”字段中看到其他收件人。
        fail_silently：一个布尔值。如果是False，send_mail将会引发一个smtplib.SMTPException。有关可能的异常列表，请参阅smtplib文档，所有这些异常都是SMTPException的子类。
        auth_user：用于向SMTP服务器进行身份验证的可选用户名。如果没有提供，Django将使用EMAIL_HOST_USER设置的值。
        auth_password：用于向SMTP服务器进行身份验证的可选密码。如果没有提供，Django将使用EMAIL_HOST_PASSWORD设置的值。
        connection：用于发送邮件的可选邮件后端。如果未指定，将使用默认后端的实例。有关详细信息，请参阅电子邮件后端的文档。
        html_message：如果提供了html_message，则生成的电子邮件将是一个多部分/备用电子邮件，其中包含消息作为text
        / plain内容类型，html_message作为text / html内容类型。





    from django.views.generic import TemplateView
    url(r'^send_success/$', TemplateView.as_view(template_name='users/send_success.html')),
    返回一些一次行的文件  不用在写视图函数了


    from django.contrib.auth.hashers import make_password, check_password 给密码加密 解密 一套流程

    from django.views.static import serve  #用于处理静态文件
        # 配置上传文件的访问函数
    url(r'^media/(?P<path>.*)$', serve, {'document_root': MEDIA_ROOT}),

    #配置static的访问函数
    url(r'^static/(?P<path>.*)$', serve, {'document_root': STATIC_ROOT}),


     post.body|linebreaks  模板标签 换一行

     {# 使用with 来 对变量进行重新命名 只要是在with 区域都能进行使用#}
     {% with comments.count as total_comments %}